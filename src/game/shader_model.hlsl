#ifndef IS_RIGID
  #define IS_RIGID 0
#endif
#ifndef IS_SKINNED
  #define IS_SKINNED 0
#endif
#if IS_RIGID == IS_SKINNED
  #error "IS_RIGID is equal to IS_SKINNED"
#endif

#if IS_RIGID
#define ShaderModelVS ShaderRigidVS
#define ShaderModelPS ShaderRigidPS
#endif
#if IS_SKINNED
#define ShaderModelVS ShaderSkinnedVS
#define ShaderModelPS ShaderSkinnedPS
#endif

cbuffer UBO : register(b0, space1)
{
  float4x4 camera_transform;
};

struct VSInput
{
  float3 position : TEXCOORD0;
  float3 color    : TEXCOORD1;
  float3 normal   : TEXCOORD2;
#if IS_SKINNED
  uint joints_packed4 : TEXCOORD3;
  float4 weights      : TEXCOORD4;
#endif
  uint InstanceIndex : SV_InstanceID;
};

struct VSOutput
{
  float4 color : TEXCOORD0;
  float4 position : SV_Position;
};

struct VSModelInstanceData
{
  float4x4 transform;
  float4 color;
};

StructuredBuffer<VSModelInstanceData> InstanceBuffer : register(t0);

#if IS_SKINNED
static float4x4 joint_inv_bind_mats[] =
{
  // Root
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 1.0f, -0.0f, -0.0f,
  -0.0f, -0.0f, 1.0f, -0.0f,
  -0.0f, -0.0f, -0.072289f, 1.0f,
  // Body
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 1.0f, -0.0f, -0.0f,
  -0.0f, -0.0f, 1.0f, -0.0f,
  -0.000453f, -0.973595f, -0.068294f, 1.0f,
  // Hips
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.990359f, 0.138524f, -0.0f,
  -0.0f, -0.138524f, 0.990359f, -0.0f,
  0.000344f, -0.981851f, -0.215880f, 1.0f,
  // Abdomen
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.984263f, 0.176709f, -0.0f,
  -0.0f, -0.176709f, 0.984263f, -0.0f,
  0.000344f, -1.078796f, -0.257781f, 1.0f,
  // Torso
  1.0f, -0.000000f, 0.000000f, -0.0f,
  0.000000f, 0.999812f, -0.019355f, -0.0f,
  -0.000000f, 0.019355f, 0.999813f, -0.0f,
  0.000344f, -1.247431f, -0.013894f, 1.0f,
  // Chest
  1.0f, -0.000000f, 0.000000f, -0.0f,
  0.000000f, 0.999821f, -0.018941f, -0.0f,
  -0.000000f, 0.018941f, 0.999821f, -0.0f,
  0.000344f, -1.377827f, -0.014465f, 1.0f,
  // Neck
  1.0f, -0.000000f, 0.000000f, -0.0f,
  0.000000f, 1.0f, 0.000000f, -0.0f,
  -0.000000f, 0.000000f, 1.000000f, -0.0f,
  0.000344f, -1.510533f, -0.043084f, 1.0f,
  // Head
  1.0f, -0.000000f, -0.000000f, -0.0f,
  0.000000f, 1.0f, -0.000000f, -0.0f,
  0.000000f, 0.000000f, 1.000000f, -0.0f,
  0.000344f, -1.587262f, -0.043084f, 1.0f,
  // Shoulder.L
  0.315386f, 0.852123f, -0.417634f, -0.0f,
  -0.417634f, 0.519819f, 0.745232f, -0.0f,
  0.852123f, -0.060617f, 0.519819f, -0.0f,
  0.514713f, -0.783112f, -1.057584f, 1.0f,
  // UpperArm.L
  0.017355f, 0.999849f, -0.000000f, -0.0f,
  0.000000f, -0.000000f, 1.0f, -0.0f,
  0.999849f, -0.017354f, 0.000000f, -0.0f,
  -0.061861f, -0.116381f, -1.443214f, 1.0f,
  // LowerArm.L
  -0.150446f, 0.988607f, -0.004706f, -0.0f,
  -0.004706f, 0.004044f, 0.999981f, -0.0f,
  0.988607f, 0.150465f, 0.004044f, -0.0f,
  0.001675f, -0.344874f, -1.441839f, 1.0f,
  // Wrist.L
  -0.046674f, 0.998645f, -0.023014f, -0.0f,
  -0.023014f, 0.021957f, 0.999494f, -0.0f,
  0.998645f, 0.047180f, 0.021958f, -0.0f,
  -0.031683f, -0.602654f, -1.432388f, 1.0f,
  // Index1.L
  -0.222220f, 0.969939f, 0.099175f, -0.0f,
  0.099175f, -0.078704f, 0.991953f, -0.0f,
  0.969939f, 0.230267f, -0.078704f, -0.0f,
  -0.101181f, -0.484345f, -1.484798f, 1.0f,
  // Index2.L
  -0.063788f, 0.982384f, -0.175647f, -0.0f,
  -0.175647f, 0.162206f, 0.970998f, -0.0f,
  0.982384f, 0.092791f, 0.162206f, -0.0f,
  0.178960f, -0.943403f, -1.288138f, 1.0f,
  // Index3.L
  -0.040260f, 0.989532f, -0.138586f, -0.0f,
  -0.138586f, 0.131828f, 0.981537f, -0.0f,
  0.989532f, 0.058723f, 0.131828f, -0.0f,
  0.107208f, -0.932521f, -1.327106f, 1.0f,
  // Index4.L
  -0.033652f, 0.988258f, -0.149045f, -0.0f,
  -0.149045f, 0.142500f, 0.978509f, -0.0f,
  0.988257f, 0.055143f, 0.142500f, -0.0f,
  0.117374f, -0.975150f, -1.316000f, 1.0f,
  // Middle1.L
  -0.013944f, 0.999902f, 0.000923f, -0.0f,
  0.000923f, -0.000910f, 0.999999f, -0.0f,
  0.999902f, 0.013945f, -0.000910f, -0.0f,
  -0.085842f, -0.594478f, -1.445227f, 1.0f,
  // Middle2.L
  0.011890f, 0.995555f, -0.093429f, -0.0f,
  -0.093429f, 0.094133f, 0.991166f, -0.0f,
  0.995555f, -0.003056f, 0.094133f, -0.0f,
  0.032419f, -0.846918f, -1.374041f, 1.0f,
  // Middle3.L
  0.001562f, 0.998144f, -0.060879f, -0.0f,
  -0.060879f, 0.060861f, 0.996288f, -0.0f,
  0.998144f, 0.002150f, 0.060861f, -0.0f,
  -0.007188f, -0.840356f, -1.402843f, 1.0f,
  // Middle4.L
  0.004661f, 0.992663f, -0.120823f, -0.0f,
  -0.120823f, 0.120498f, 0.985334f, -0.0f,
  0.992663f, 0.010005f, 0.120499f, -0.0f,
  0.077836f, -0.962437f, -1.345078f, 1.0f,
  // Ring1.L
  0.209526f, 0.977247f, 0.032960f, -0.0f,
  0.032960f, -0.040748f, 0.998626f, -0.0f,
  0.977247f, -0.208152f, -0.040748f, -0.0f,
  -0.262891f, -0.502840f, -1.458593f, 1.0f,
  // Ring2.L
  0.162865f, 0.982963f, -0.085196f, -0.0f,
  -0.085196f, 0.100037f, 0.991330f, -0.0f,
  0.982963f, -0.154194f, 0.100037f, -0.0f,
  -0.059966f, -0.832546f, -1.373638f, 1.0f,
  // Ring3.L
  0.138285f, 0.984636f, -0.106623f, -0.0f,
  -0.106623f, 0.121833f, 0.986807f, -0.0f,
  0.984636f, -0.125092f, 0.121833f, -0.0f,
  -0.010873f, -0.900001f, -1.352552f, 1.0f,
  // Ring4.L
  0.156230f, 0.981960f, -0.106520f, -0.0f,
  -0.106520f, 0.123966f, 0.986552f, -0.0f,
  0.981960f, -0.142783f, 0.123966f, -0.0f,
  -0.024774f, -0.932157f, -1.352389f, 1.0f,
  // Pinky1.L
  0.400302f, 0.915949f, 0.028223f, -0.0f,
  0.028223f, -0.043107f, 0.998672f, -0.0f,
  0.915949f, -0.398973f, -0.043107f, -0.0f,
  -0.363786f, -0.445277f, -1.455625f, 1.0f,
  // Pinky2.L
  0.279773f, 0.956938f, -0.077439f, -0.0f,
  -0.077439f, 0.102890f, 0.991674f, -0.0f,
  0.956938f, -0.271447f, 0.102890f, -0.0f,
  -0.129102f, -0.806098f, -1.378299f, 1.0f,
  // Pinky3.L
  0.308140f, 0.947209f, -0.088575f, -0.0f,
  -0.088575f, 0.121265f, 0.988660f, -0.0f,
  0.947209f, -0.296801f, 0.121265f, -0.0f,
  -0.133233f, -0.850312f, -1.366601f, 1.0f,
  // Pinky4.L
  0.309437f, 0.944837f, -0.107390f, -0.0f,
  -0.107390f, 0.146932f, 0.983300f, -0.0f,
  0.944837f, -0.292736f, 0.146932f, -0.0f,
  -0.106931f, -0.912524f, -1.345537f, 1.0f,
  // Thumb1.L
  -0.207698f, 0.609829f, 0.764833f, -0.0f,
  0.764833f, -0.386204f, 0.515632f, -0.0f,
  0.609829f, 0.692065f, -0.386204f, -0.0f,
  -1.038113f, 0.131166f, -1.163861f, 1.0f,
  // Thumb2.L
  -0.547028f, 0.756689f, 0.358026f, -0.0f,
  0.358026f, -0.175119f, 0.917143f, -0.0f,
  0.756688f, 0.629885f, -0.175119f, -0.0f,
  -0.266545f, -0.335330f, -1.500363f, 1.0f,
  // Thumb3.L
  -0.497269f, 0.842255f, 0.208158f, -0.0f,
  0.208158f, -0.117095f, 0.971061f, -0.0f,
  0.842255f, 0.526209f, -0.117094f, -0.0f,
  -0.103433f, -0.487722f, -1.485883f, 1.0f,
  // Shoulder.R
  0.315386f, -0.852123f, 0.417634f, -0.0f,
  0.417634f, 0.519819f, 0.745232f, -0.0f,
  -0.852123f, -0.060617f, 0.519819f, -0.0f,
  -0.514713f, -0.783112f, -1.057584f, 1.0f,
  // UpperArm.R
  0.017355f, -0.999849f, 0.000000f, -0.0f,
  -0.000000f, -0.000000f, 1.0f, -0.0f,
  -0.999849f, -0.017354f, 0.000000f, -0.0f,
  0.061861f, -0.116381f, -1.443214f, 1.0f,
  // LowerArm.R
  -0.150446f, -0.988607f, 0.004706f, -0.0f,
  0.004706f, 0.004044f, 0.999981f, -0.0f,
  -0.988607f, 0.150465f, 0.004044f, -0.0f,
  -0.001675f, -0.344874f, -1.441839f, 1.0f,
  // Wrist.R
  -0.046674f, -0.998645f, 0.023014f, -0.0f,
  0.023014f, 0.021957f, 0.999494f, -0.0f,
  -0.998645f, 0.047180f, 0.021958f, -0.0f,
  0.031683f, -0.602654f, -1.432388f, 1.0f,
  // Index1.R
  -0.222220f, -0.969939f, -0.099175f, -0.0f,
  -0.099175f, -0.078704f, 0.991953f, -0.0f,
  -0.969939f, 0.230267f, -0.078704f, -0.0f,
  0.101181f, -0.484345f, -1.484798f, 1.0f,
  // Index2.R
  -0.063788f, -0.982384f, 0.175647f, -0.0f,
  0.175647f, 0.162206f, 0.970998f, -0.0f,
  -0.982384f, 0.092791f, 0.162206f, -0.0f,
  -0.178960f, -0.943403f, -1.288138f, 1.0f,
  // Index3.R
  -0.040260f, -0.989532f, 0.138586f, -0.0f,
  0.138586f, 0.131828f, 0.981537f, -0.0f,
  -0.989532f, 0.058723f, 0.131828f, -0.0f,
  -0.107208f, -0.932521f, -1.327106f, 1.0f,
  // Index4.R
  -0.033652f, -0.988258f, 0.149045f, -0.0f,
  0.149045f, 0.142500f, 0.978509f, -0.0f,
  -0.988257f, 0.055143f, 0.142500f, -0.0f,
  -0.117374f, -0.975150f, -1.316000f, 1.0f,
  // Middle1.R
  -0.013944f, -0.999902f, -0.000923f, -0.0f,
  -0.000923f, -0.000910f, 0.999999f, -0.0f,
  -0.999902f, 0.013945f, -0.000910f, -0.0f,
  0.085842f, -0.594478f, -1.445227f, 1.0f,
  // Middle2.R
  0.011890f, -0.995555f, 0.093429f, -0.0f,
  0.093429f, 0.094133f, 0.991166f, -0.0f,
  -0.995555f, -0.003056f, 0.094133f, -0.0f,
  -0.032419f, -0.846918f, -1.374041f, 1.0f,
  // Middle3.R
  0.001562f, -0.998144f, 0.060879f, -0.0f,
  0.060879f, 0.060861f, 0.996288f, -0.0f,
  -0.998144f, 0.002150f, 0.060861f, -0.0f,
  0.007188f, -0.840356f, -1.402843f, 1.0f,
  // Middle4.R
  0.004661f, -0.992663f, 0.120823f, -0.0f,
  0.120823f, 0.120498f, 0.985334f, -0.0f,
  -0.992663f, 0.010005f, 0.120499f, -0.0f,
  -0.077836f, -0.962437f, -1.345078f, 1.0f,
  // Ring1.R
  0.209526f, -0.977247f, -0.032960f, -0.0f,
  -0.032960f, -0.040748f, 0.998626f, -0.0f,
  -0.977247f, -0.208152f, -0.040748f, -0.0f,
  0.262891f, -0.502840f, -1.458593f, 1.0f,
  // Ring2.R
  0.162865f, -0.982963f, 0.085196f, -0.0f,
  0.085196f, 0.100037f, 0.991330f, -0.0f,
  -0.982963f, -0.154194f, 0.100037f, -0.0f,
  0.059966f, -0.832546f, -1.373638f, 1.0f,
  // Ring3.R
  0.138285f, -0.984636f, 0.106623f, -0.0f,
  0.106623f, 0.121833f, 0.986807f, -0.0f,
  -0.984636f, -0.125092f, 0.121833f, -0.0f,
  0.010873f, -0.900001f, -1.352552f, 1.0f,
  // Ring4.R
  0.156230f, -0.981960f, 0.106520f, -0.0f,
  0.106520f, 0.123966f, 0.986552f, -0.0f,
  -0.981960f, -0.142783f, 0.123966f, -0.0f,
  0.024774f, -0.932157f, -1.352389f, 1.0f,
  // Pinky1.R
  0.400302f, -0.915949f, -0.028223f, -0.0f,
  -0.028223f, -0.043107f, 0.998672f, -0.0f,
  -0.915949f, -0.398973f, -0.043107f, -0.0f,
  0.363786f, -0.445277f, -1.455625f, 1.0f,
  // Pinky2.R
  0.279773f, -0.956938f, 0.077439f, -0.0f,
  0.077439f, 0.102890f, 0.991674f, -0.0f,
  -0.956938f, -0.271447f, 0.102890f, -0.0f,
  0.129102f, -0.806098f, -1.378299f, 1.0f,
  // Pinky3.R
  0.308140f, -0.947209f, 0.088575f, -0.0f,
  0.088575f, 0.121265f, 0.988660f, -0.0f,
  -0.947209f, -0.296801f, 0.121265f, -0.0f,
  0.133233f, -0.850312f, -1.366601f, 1.0f,
  // Pinky4.R
  0.309437f, -0.944837f, 0.107390f, -0.0f,
  0.107390f, 0.146932f, 0.983300f, -0.0f,
  -0.944837f, -0.292736f, 0.146932f, -0.0f,
  0.106931f, -0.912524f, -1.345537f, 1.0f,
  // Thumb1.R
  -0.207698f, -0.609829f, -0.764833f, -0.0f,
  -0.764833f, -0.386204f, 0.515632f, -0.0f,
  -0.609829f, 0.692065f, -0.386204f, -0.0f,
  1.038113f, 0.131166f, -1.163861f, 1.0f,
  // Thumb2.R
  -0.547028f, -0.756689f, -0.358026f, -0.0f,
  -0.358026f, -0.175119f, 0.917143f, -0.0f,
  -0.756688f, 0.629885f, -0.175119f, -0.0f,
  0.266545f, -0.335330f, -1.500363f, 1.0f,
  // Thumb3.R
  -0.497269f, -0.842255f, -0.208158f, -0.0f,
  -0.208158f, -0.117095f, 0.971061f, -0.0f,
  -0.842255f, 0.526209f, -0.117094f, -0.0f,
  0.103433f, -0.487722f, -1.485883f, 1.0f,
  // UpperLeg.L
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, -0.996133f, -0.087860f, -0.0f,
  -0.0f, 0.087860f, -0.996130f, -0.0f,
  -0.096859f, 1.028961f, 0.135994f, 1.0f,
  // LowerLeg.L
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, -0.998880f, 0.047307f, -0.0f,
  -0.0f, -0.047306f, -0.998877f, -0.0f,
  -0.096859f, 0.560489f, 0.060949f, 1.0f,
  // UpperLeg.R
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, -0.996133f, -0.087860f, -0.0f,
  -0.0f, 0.087860f, -0.996130f, -0.0f,
  0.096859f, 1.028961f, 0.135994f, 1.0f,
  // LowerLeg.R
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, -0.998880f, 0.047307f, -0.0f,
  -0.0f, -0.047306f, -0.998877f, -0.0f,
  0.096859f, 0.560489f, 0.060949f, 1.0f,
  // Foot.L
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.005348f, -0.999986f, -0.0f,
  -0.0f, 0.999986f, 0.005348f, -0.0f,
  -0.096859f, -0.062216f, 0.022419f, 1.0f,
  // PT.L
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.999986f, 0.005348f, -0.0f,
  -0.0f, -0.005348f, 0.999986f, -0.0f,
  -0.096859f, -0.486532f, -0.760344f, 1.0f,
  // Foot.R
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.005348f, -0.999986f, -0.0f,
  -0.0f, 0.999986f, 0.005348f, -0.0f,
  0.096859f, -0.062216f, 0.022419f, 1.0f,
  // PT.R
  1.0f, -0.0f, -0.0f, -0.0f,
  -0.0f, 0.999986f, 0.005348f, -0.0f,
  -0.0f, -0.005348f, 0.999986f, -0.0f,
  0.096859f, -0.486532f, -0.760344f, 1.0f,

};
#endif

float4x4 Mat4_RotationPart(float4x4 mat)
{
  // @todo in the future this matrix will need to be normalized
  // to eliminate scaling from the matrix
  mat._14 = 0.f;
  mat._24 = 0.f;
  mat._34 = 0.f;
  mat._44 = 1.f;
  return mat;
}
float4x4 Mat4_Identity()
{
  return float4x4(1.0f, 0.0f, 0.0f, 0.0f,
                  0.0f, 1.0f, 0.0f, 0.0f,
                  0.0f, 0.0f, 1.0f, 0.0f,
                  0.0f, 0.0f, 0.0f, 1.0f);
}

float4x4 Mat4_Scale(float scale)
{
  float4x4 res = Mat4_Identity();
  res._11 = scale;
  res._22 = scale;
  res._33 = scale;
  return res;
}

VSOutput ShaderModelVS(VSInput input)
{
  VSModelInstanceData instance = InstanceBuffer[input.InstanceIndex];

  float3 normal = mul(Mat4_RotationPart(instance.transform), float4(input.normal, 1.f)).xyz;
  float3 world_sun_pos = normalize(float3(-0.5f, 0.5f, 1.f));
  float in_sun_coef = dot(world_sun_pos, normal);

  float4 color = float4(input.color, 1.0f);
  color *= instance.color;
  color.xyz *= clamp(in_sun_coef, 0.25f, 1.0f);

  float4x4 model_transform = instance.transform;
  model_transform = mul(camera_transform, model_transform);

  float4 position = float4(input.position, 1.0f);
#if IS_SKINNED
  uint joint0 = (input.joints_packed4      ) & 0xff;
  uint joint1 = (input.joints_packed4 >>  8) & 0xff;
  uint joint2 = (input.joints_packed4 >> 16) & 0xff;
  uint joint3 = (input.joints_packed4 >> 24) & 0xff;

  float4x4 joint_mat0 = joint_inv_bind_mats[joint0];
  float4x4 joint_mat1 = joint_inv_bind_mats[joint1];
  float4x4 joint_mat2 = joint_inv_bind_mats[joint2];
  float4x4 joint_mat3 = joint_inv_bind_mats[joint3];

#if 1
  float4 pos0 = mul(joint_mat0, position);
  float4 pos1 = mul(joint_mat0, position);
  float4 pos2 = mul(joint_mat0, position);
  float4 pos3 = mul(joint_mat0, position);

  position =
    pos0 * input.weights.x +
    pos1 * input.weights.y +
    pos2 * input.weights.z +
    pos3 * input.weights.w;
#endif

  position = mul(Mat4_Scale(80.f), position);
  position = mul(camera_transform, position);
#else
  position = mul(model_transform, position);
#endif

  VSOutput output;
  output.color = color;
  output.position = position;
  return output;
}

float4 ShaderModelPS(VSOutput input) : SV_Target0
{
  return input.color;
}
