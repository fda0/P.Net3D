// ===
// THIS FILE IS AUTOGENERATED BY codegen_math.c
// DO NOT EDIT MANUALLY
// ===

// --- --- --- --- --- --- ---
// --- Vector math for float ---
// --- --- --- --- --- --- ---
typedef union
{
  struct { float x, y; };
  float E[2];
} V2;

typedef union
{
  struct { float x, y, z; };
  float E[3];
} V3;

typedef union
{
  struct { float x, y, z, w; };
  float E[4];
} V4;

static V2 V2_Scale(V2 a, float scale) { return (V2){a.x*scale, a.y*scale}; }
static V3 V3_Scale(V3 a, float scale) { return (V3){a.x*scale, a.y*scale, a.z*scale}; }
static V4 V4_Scale(V4 a, float scale) { return (V4){a.x*scale, a.y*scale, a.z*scale, a.w*scale}; }

static V2 V2_Add(V2 a, V2 b) { return (V2){a.x + b.x, a.y + b.y}; }
static V3 V3_Add(V3 a, V3 b) { return (V3){a.x + b.x, a.y + b.y, a.z + b.z}; }
static V4 V4_Add(V4 a, V4 b) { return (V4){a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }

static V2 V2_Sub(V2 a, V2 b) { return (V2){a.x - b.x, a.y - b.y}; }
static V3 V3_Sub(V3 a, V3 b) { return (V3){a.x - b.x, a.y - b.y, a.z - b.z}; }
static V4 V4_Sub(V4 a, V4 b) { return (V4){a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }

static V2 V2_Mul(V2 a, V2 b) { return (V2){a.x * b.x, a.y * b.y}; }
static V3 V3_Mul(V3 a, V3 b) { return (V3){a.x * b.x, a.y * b.y, a.z * b.z}; }
static V4 V4_Mul(V4 a, V4 b) { return (V4){a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w}; }

static V2 V2_Div(V2 a, V2 b) { return (V2){a.x / b.x, a.y / b.y}; }
static V3 V3_Div(V3 a, V3 b) { return (V3){a.x / b.x, a.y / b.y, a.z / b.z}; }
static V4 V4_Div(V4 a, V4 b) { return (V4){a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w}; }

static V2 V2_SDiv(V2 a, float b) { return (V2){a.x / b, a.y / b}; }
static V3 V3_SDiv(V3 a, float b) { return (V3){a.x / b, a.y / b, a.z / b}; }
static V4 V4_SDiv(V4 a, float b) { return (V4){a.x / b, a.y / b, a.z / b, a.w / b}; }

static V2 V2_Clamp(V2 min, V2 max, V2 val) {
  return (V2){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y)};
}
static V3 V3_Clamp(V3 min, V3 max, V3 val) {
  return (V3){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z)};
}
static V4 V4_Clamp(V4 min, V4 max, V4 val) {
  return (V4){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z), Clamp(min.w, max.w, val.w)};
}

static V2 V2_SClamp(float min, float max, V2 val) {
  return (V2){Clamp(min, max, val.x), Clamp(min, max, val.y)};
}
static V3 V3_SClamp(float min, float max, V3 val) {
  return (V3){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z)};
}
static V4 V4_SClamp(float min, float max, V4 val) {
  return (V4){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z), Clamp(min, max, val.w)};
}

static V2 V2_SMin(V2 val, float min) {
  return (V2){Min(min, val.x), Min(min, val.y)};
}
static V3 V3_SMin(V3 val, float min) {
  return (V3){Min(min, val.x), Min(min, val.y), Min(min, val.z)};
}
static V4 V4_SMin(V4 val, float min) {
  return (V4){Min(min, val.x), Min(min, val.y), Min(min, val.z), Min(min, val.w)};
}

static V2 V2_SMax(V2 val, float max) {
  return (V2){Max(max, val.x), Max(max, val.y)};
}
static V3 V3_SMax(V3 val, float max) {
  return (V3){Max(max, val.x), Max(max, val.y), Max(max, val.z)};
}
static V4 V4_SMax(V4 val, float max) {
  return (V4){Max(max, val.x), Max(max, val.y), Max(max, val.z), Max(max, val.w)};
}

static float V2_Dot(V2 a, V2 b) { return a.x*b.x + a.y*b.y; }
static float V3_Dot(V3 a, V3 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
static float V4_Dot(V4 a, V4 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

static bool V2_HasLength(V2 a) { return a.x || a.y; }
static bool V3_HasLength(V3 a) { return a.x || a.y || a.z; }
static bool V4_HasLength(V4 a) { return a.x || a.y || a.z || a.w; }

// [SIGNED_ONLY]
static V2 V2_Reverse(V2 a) { return (V2){-a.x, -a.y}; }
static V3 V3_Reverse(V3 a) { return (V3){-a.x, -a.y, -a.z}; }
static V4 V4_Reverse(V4 a) { return (V4){-a.x, -a.y, -a.z, -a.w}; }
// --- --- --- --- --- --- ---
// --- Vector math for I32 ---
// --- --- --- --- --- --- ---
typedef union
{
  struct { I32 x, y; };
  I32 E[2];
} V2I32;

typedef union
{
  struct { I32 x, y, z; };
  I32 E[3];
} V3I32;

typedef union
{
  struct { I32 x, y, z, w; };
  I32 E[4];
} V4I32;

static V2I32 V2I32_Scale(V2I32 a, I32 scale) { return (V2I32){a.x*scale, a.y*scale}; }
static V3I32 V3I32_Scale(V3I32 a, I32 scale) { return (V3I32){a.x*scale, a.y*scale, a.z*scale}; }
static V4I32 V4I32_Scale(V4I32 a, I32 scale) { return (V4I32){a.x*scale, a.y*scale, a.z*scale, a.w*scale}; }

static V2I32 V2I32_Add(V2I32 a, V2I32 b) { return (V2I32){a.x + b.x, a.y + b.y}; }
static V3I32 V3I32_Add(V3I32 a, V3I32 b) { return (V3I32){a.x + b.x, a.y + b.y, a.z + b.z}; }
static V4I32 V4I32_Add(V4I32 a, V4I32 b) { return (V4I32){a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }

static V2I32 V2I32_Sub(V2I32 a, V2I32 b) { return (V2I32){a.x - b.x, a.y - b.y}; }
static V3I32 V3I32_Sub(V3I32 a, V3I32 b) { return (V3I32){a.x - b.x, a.y - b.y, a.z - b.z}; }
static V4I32 V4I32_Sub(V4I32 a, V4I32 b) { return (V4I32){a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }

static V2I32 V2I32_Mul(V2I32 a, V2I32 b) { return (V2I32){a.x * b.x, a.y * b.y}; }
static V3I32 V3I32_Mul(V3I32 a, V3I32 b) { return (V3I32){a.x * b.x, a.y * b.y, a.z * b.z}; }
static V4I32 V4I32_Mul(V4I32 a, V4I32 b) { return (V4I32){a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w}; }

static V2I32 V2I32_Div(V2I32 a, V2I32 b) { return (V2I32){a.x / b.x, a.y / b.y}; }
static V3I32 V3I32_Div(V3I32 a, V3I32 b) { return (V3I32){a.x / b.x, a.y / b.y, a.z / b.z}; }
static V4I32 V4I32_Div(V4I32 a, V4I32 b) { return (V4I32){a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w}; }

static V2I32 V2I32_SDiv(V2I32 a, I32 b) { return (V2I32){a.x / b, a.y / b}; }
static V3I32 V3I32_SDiv(V3I32 a, I32 b) { return (V3I32){a.x / b, a.y / b, a.z / b}; }
static V4I32 V4I32_SDiv(V4I32 a, I32 b) { return (V4I32){a.x / b, a.y / b, a.z / b, a.w / b}; }

static V2I32 V2I32_Clamp(V2I32 min, V2I32 max, V2I32 val) {
  return (V2I32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y)};
}
static V3I32 V3I32_Clamp(V3I32 min, V3I32 max, V3I32 val) {
  return (V3I32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z)};
}
static V4I32 V4I32_Clamp(V4I32 min, V4I32 max, V4I32 val) {
  return (V4I32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z), Clamp(min.w, max.w, val.w)};
}

static V2I32 V2I32_SClamp(I32 min, I32 max, V2I32 val) {
  return (V2I32){Clamp(min, max, val.x), Clamp(min, max, val.y)};
}
static V3I32 V3I32_SClamp(I32 min, I32 max, V3I32 val) {
  return (V3I32){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z)};
}
static V4I32 V4I32_SClamp(I32 min, I32 max, V4I32 val) {
  return (V4I32){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z), Clamp(min, max, val.w)};
}

static V2I32 V2I32_SMin(V2I32 val, I32 min) {
  return (V2I32){Min(min, val.x), Min(min, val.y)};
}
static V3I32 V3I32_SMin(V3I32 val, I32 min) {
  return (V3I32){Min(min, val.x), Min(min, val.y), Min(min, val.z)};
}
static V4I32 V4I32_SMin(V4I32 val, I32 min) {
  return (V4I32){Min(min, val.x), Min(min, val.y), Min(min, val.z), Min(min, val.w)};
}

static V2I32 V2I32_SMax(V2I32 val, I32 max) {
  return (V2I32){Max(max, val.x), Max(max, val.y)};
}
static V3I32 V3I32_SMax(V3I32 val, I32 max) {
  return (V3I32){Max(max, val.x), Max(max, val.y), Max(max, val.z)};
}
static V4I32 V4I32_SMax(V4I32 val, I32 max) {
  return (V4I32){Max(max, val.x), Max(max, val.y), Max(max, val.z), Max(max, val.w)};
}

static I32 V2I32_Dot(V2I32 a, V2I32 b) { return a.x*b.x + a.y*b.y; }
static I32 V3I32_Dot(V3I32 a, V3I32 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
static I32 V4I32_Dot(V4I32 a, V4I32 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

static bool V2I32_HasLength(V2I32 a) { return a.x || a.y; }
static bool V3I32_HasLength(V3I32 a) { return a.x || a.y || a.z; }
static bool V4I32_HasLength(V4I32 a) { return a.x || a.y || a.z || a.w; }

// [SIGNED_ONLY]
static V2I32 V2I32_Reverse(V2I32 a) { return (V2I32){-a.x, -a.y}; }
static V3I32 V3I32_Reverse(V3I32 a) { return (V3I32){-a.x, -a.y, -a.z}; }
static V4I32 V4I32_Reverse(V4I32 a) { return (V4I32){-a.x, -a.y, -a.z, -a.w}; }
// --- --- --- --- --- --- ---
// --- Vector math for I16 ---
// --- --- --- --- --- --- ---
typedef union
{
  struct { I16 x, y; };
  I16 E[2];
} V2I16;

typedef union
{
  struct { I16 x, y, z; };
  I16 E[3];
} V3I16;

typedef union
{
  struct { I16 x, y, z, w; };
  I16 E[4];
} V4I16;

static V2I16 V2I16_Scale(V2I16 a, I16 scale) { return (V2I16){a.x*scale, a.y*scale}; }
static V3I16 V3I16_Scale(V3I16 a, I16 scale) { return (V3I16){a.x*scale, a.y*scale, a.z*scale}; }
static V4I16 V4I16_Scale(V4I16 a, I16 scale) { return (V4I16){a.x*scale, a.y*scale, a.z*scale, a.w*scale}; }

static V2I16 V2I16_Add(V2I16 a, V2I16 b) { return (V2I16){a.x + b.x, a.y + b.y}; }
static V3I16 V3I16_Add(V3I16 a, V3I16 b) { return (V3I16){a.x + b.x, a.y + b.y, a.z + b.z}; }
static V4I16 V4I16_Add(V4I16 a, V4I16 b) { return (V4I16){a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }

static V2I16 V2I16_Sub(V2I16 a, V2I16 b) { return (V2I16){a.x - b.x, a.y - b.y}; }
static V3I16 V3I16_Sub(V3I16 a, V3I16 b) { return (V3I16){a.x - b.x, a.y - b.y, a.z - b.z}; }
static V4I16 V4I16_Sub(V4I16 a, V4I16 b) { return (V4I16){a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }

static V2I16 V2I16_Mul(V2I16 a, V2I16 b) { return (V2I16){a.x * b.x, a.y * b.y}; }
static V3I16 V3I16_Mul(V3I16 a, V3I16 b) { return (V3I16){a.x * b.x, a.y * b.y, a.z * b.z}; }
static V4I16 V4I16_Mul(V4I16 a, V4I16 b) { return (V4I16){a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w}; }

static V2I16 V2I16_Div(V2I16 a, V2I16 b) { return (V2I16){a.x / b.x, a.y / b.y}; }
static V3I16 V3I16_Div(V3I16 a, V3I16 b) { return (V3I16){a.x / b.x, a.y / b.y, a.z / b.z}; }
static V4I16 V4I16_Div(V4I16 a, V4I16 b) { return (V4I16){a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w}; }

static V2I16 V2I16_SDiv(V2I16 a, I16 b) { return (V2I16){a.x / b, a.y / b}; }
static V3I16 V3I16_SDiv(V3I16 a, I16 b) { return (V3I16){a.x / b, a.y / b, a.z / b}; }
static V4I16 V4I16_SDiv(V4I16 a, I16 b) { return (V4I16){a.x / b, a.y / b, a.z / b, a.w / b}; }

static V2I16 V2I16_Clamp(V2I16 min, V2I16 max, V2I16 val) {
  return (V2I16){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y)};
}
static V3I16 V3I16_Clamp(V3I16 min, V3I16 max, V3I16 val) {
  return (V3I16){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z)};
}
static V4I16 V4I16_Clamp(V4I16 min, V4I16 max, V4I16 val) {
  return (V4I16){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z), Clamp(min.w, max.w, val.w)};
}

static V2I16 V2I16_SClamp(I16 min, I16 max, V2I16 val) {
  return (V2I16){Clamp(min, max, val.x), Clamp(min, max, val.y)};
}
static V3I16 V3I16_SClamp(I16 min, I16 max, V3I16 val) {
  return (V3I16){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z)};
}
static V4I16 V4I16_SClamp(I16 min, I16 max, V4I16 val) {
  return (V4I16){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z), Clamp(min, max, val.w)};
}

static V2I16 V2I16_SMin(V2I16 val, I16 min) {
  return (V2I16){Min(min, val.x), Min(min, val.y)};
}
static V3I16 V3I16_SMin(V3I16 val, I16 min) {
  return (V3I16){Min(min, val.x), Min(min, val.y), Min(min, val.z)};
}
static V4I16 V4I16_SMin(V4I16 val, I16 min) {
  return (V4I16){Min(min, val.x), Min(min, val.y), Min(min, val.z), Min(min, val.w)};
}

static V2I16 V2I16_SMax(V2I16 val, I16 max) {
  return (V2I16){Max(max, val.x), Max(max, val.y)};
}
static V3I16 V3I16_SMax(V3I16 val, I16 max) {
  return (V3I16){Max(max, val.x), Max(max, val.y), Max(max, val.z)};
}
static V4I16 V4I16_SMax(V4I16 val, I16 max) {
  return (V4I16){Max(max, val.x), Max(max, val.y), Max(max, val.z), Max(max, val.w)};
}

static I16 V2I16_Dot(V2I16 a, V2I16 b) { return a.x*b.x + a.y*b.y; }
static I16 V3I16_Dot(V3I16 a, V3I16 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
static I16 V4I16_Dot(V4I16 a, V4I16 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

static bool V2I16_HasLength(V2I16 a) { return a.x || a.y; }
static bool V3I16_HasLength(V3I16 a) { return a.x || a.y || a.z; }
static bool V4I16_HasLength(V4I16 a) { return a.x || a.y || a.z || a.w; }

// [SIGNED_ONLY]
static V2I16 V2I16_Reverse(V2I16 a) { return (V2I16){-a.x, -a.y}; }
static V3I16 V3I16_Reverse(V3I16 a) { return (V3I16){-a.x, -a.y, -a.z}; }
static V4I16 V4I16_Reverse(V4I16 a) { return (V4I16){-a.x, -a.y, -a.z, -a.w}; }
// --- --- --- --- --- --- ---
// --- Vector math for U64 ---
// --- --- --- --- --- --- ---
typedef union
{
  struct { U64 x, y; };
  U64 E[2];
} V2U64;

typedef union
{
  struct { U64 x, y, z; };
  U64 E[3];
} V3U64;

typedef union
{
  struct { U64 x, y, z, w; };
  U64 E[4];
} V4U64;

static V2U64 V2U64_Scale(V2U64 a, U64 scale) { return (V2U64){a.x*scale, a.y*scale}; }
static V3U64 V3U64_Scale(V3U64 a, U64 scale) { return (V3U64){a.x*scale, a.y*scale, a.z*scale}; }
static V4U64 V4U64_Scale(V4U64 a, U64 scale) { return (V4U64){a.x*scale, a.y*scale, a.z*scale, a.w*scale}; }

static V2U64 V2U64_Add(V2U64 a, V2U64 b) { return (V2U64){a.x + b.x, a.y + b.y}; }
static V3U64 V3U64_Add(V3U64 a, V3U64 b) { return (V3U64){a.x + b.x, a.y + b.y, a.z + b.z}; }
static V4U64 V4U64_Add(V4U64 a, V4U64 b) { return (V4U64){a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }

static V2U64 V2U64_Sub(V2U64 a, V2U64 b) { return (V2U64){a.x - b.x, a.y - b.y}; }
static V3U64 V3U64_Sub(V3U64 a, V3U64 b) { return (V3U64){a.x - b.x, a.y - b.y, a.z - b.z}; }
static V4U64 V4U64_Sub(V4U64 a, V4U64 b) { return (V4U64){a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }

static V2U64 V2U64_Mul(V2U64 a, V2U64 b) { return (V2U64){a.x * b.x, a.y * b.y}; }
static V3U64 V3U64_Mul(V3U64 a, V3U64 b) { return (V3U64){a.x * b.x, a.y * b.y, a.z * b.z}; }
static V4U64 V4U64_Mul(V4U64 a, V4U64 b) { return (V4U64){a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w}; }

static V2U64 V2U64_Div(V2U64 a, V2U64 b) { return (V2U64){a.x / b.x, a.y / b.y}; }
static V3U64 V3U64_Div(V3U64 a, V3U64 b) { return (V3U64){a.x / b.x, a.y / b.y, a.z / b.z}; }
static V4U64 V4U64_Div(V4U64 a, V4U64 b) { return (V4U64){a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w}; }

static V2U64 V2U64_SDiv(V2U64 a, U64 b) { return (V2U64){a.x / b, a.y / b}; }
static V3U64 V3U64_SDiv(V3U64 a, U64 b) { return (V3U64){a.x / b, a.y / b, a.z / b}; }
static V4U64 V4U64_SDiv(V4U64 a, U64 b) { return (V4U64){a.x / b, a.y / b, a.z / b, a.w / b}; }

static V2U64 V2U64_Clamp(V2U64 min, V2U64 max, V2U64 val) {
  return (V2U64){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y)};
}
static V3U64 V3U64_Clamp(V3U64 min, V3U64 max, V3U64 val) {
  return (V3U64){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z)};
}
static V4U64 V4U64_Clamp(V4U64 min, V4U64 max, V4U64 val) {
  return (V4U64){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z), Clamp(min.w, max.w, val.w)};
}

static V2U64 V2U64_SClamp(U64 min, U64 max, V2U64 val) {
  return (V2U64){Clamp(min, max, val.x), Clamp(min, max, val.y)};
}
static V3U64 V3U64_SClamp(U64 min, U64 max, V3U64 val) {
  return (V3U64){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z)};
}
static V4U64 V4U64_SClamp(U64 min, U64 max, V4U64 val) {
  return (V4U64){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z), Clamp(min, max, val.w)};
}

static V2U64 V2U64_SMin(V2U64 val, U64 min) {
  return (V2U64){Min(min, val.x), Min(min, val.y)};
}
static V3U64 V3U64_SMin(V3U64 val, U64 min) {
  return (V3U64){Min(min, val.x), Min(min, val.y), Min(min, val.z)};
}
static V4U64 V4U64_SMin(V4U64 val, U64 min) {
  return (V4U64){Min(min, val.x), Min(min, val.y), Min(min, val.z), Min(min, val.w)};
}

static V2U64 V2U64_SMax(V2U64 val, U64 max) {
  return (V2U64){Max(max, val.x), Max(max, val.y)};
}
static V3U64 V3U64_SMax(V3U64 val, U64 max) {
  return (V3U64){Max(max, val.x), Max(max, val.y), Max(max, val.z)};
}
static V4U64 V4U64_SMax(V4U64 val, U64 max) {
  return (V4U64){Max(max, val.x), Max(max, val.y), Max(max, val.z), Max(max, val.w)};
}

static U64 V2U64_Dot(V2U64 a, V2U64 b) { return a.x*b.x + a.y*b.y; }
static U64 V3U64_Dot(V3U64 a, V3U64 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
static U64 V4U64_Dot(V4U64 a, V4U64 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

static bool V2U64_HasLength(V2U64 a) { return a.x || a.y; }
static bool V3U64_HasLength(V3U64 a) { return a.x || a.y || a.z; }
static bool V4U64_HasLength(V4U64 a) { return a.x || a.y || a.z || a.w; }

// --- --- --- --- --- --- ---
// --- Vector math for U32 ---
// --- --- --- --- --- --- ---
typedef union
{
  struct { U32 x, y; };
  U32 E[2];
} V2U32;

typedef union
{
  struct { U32 x, y, z; };
  U32 E[3];
} V3U32;

typedef union
{
  struct { U32 x, y, z, w; };
  U32 E[4];
} V4U32;

static V2U32 V2U32_Scale(V2U32 a, U32 scale) { return (V2U32){a.x*scale, a.y*scale}; }
static V3U32 V3U32_Scale(V3U32 a, U32 scale) { return (V3U32){a.x*scale, a.y*scale, a.z*scale}; }
static V4U32 V4U32_Scale(V4U32 a, U32 scale) { return (V4U32){a.x*scale, a.y*scale, a.z*scale, a.w*scale}; }

static V2U32 V2U32_Add(V2U32 a, V2U32 b) { return (V2U32){a.x + b.x, a.y + b.y}; }
static V3U32 V3U32_Add(V3U32 a, V3U32 b) { return (V3U32){a.x + b.x, a.y + b.y, a.z + b.z}; }
static V4U32 V4U32_Add(V4U32 a, V4U32 b) { return (V4U32){a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }

static V2U32 V2U32_Sub(V2U32 a, V2U32 b) { return (V2U32){a.x - b.x, a.y - b.y}; }
static V3U32 V3U32_Sub(V3U32 a, V3U32 b) { return (V3U32){a.x - b.x, a.y - b.y, a.z - b.z}; }
static V4U32 V4U32_Sub(V4U32 a, V4U32 b) { return (V4U32){a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }

static V2U32 V2U32_Mul(V2U32 a, V2U32 b) { return (V2U32){a.x * b.x, a.y * b.y}; }
static V3U32 V3U32_Mul(V3U32 a, V3U32 b) { return (V3U32){a.x * b.x, a.y * b.y, a.z * b.z}; }
static V4U32 V4U32_Mul(V4U32 a, V4U32 b) { return (V4U32){a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w}; }

static V2U32 V2U32_Div(V2U32 a, V2U32 b) { return (V2U32){a.x / b.x, a.y / b.y}; }
static V3U32 V3U32_Div(V3U32 a, V3U32 b) { return (V3U32){a.x / b.x, a.y / b.y, a.z / b.z}; }
static V4U32 V4U32_Div(V4U32 a, V4U32 b) { return (V4U32){a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w}; }

static V2U32 V2U32_SDiv(V2U32 a, U32 b) { return (V2U32){a.x / b, a.y / b}; }
static V3U32 V3U32_SDiv(V3U32 a, U32 b) { return (V3U32){a.x / b, a.y / b, a.z / b}; }
static V4U32 V4U32_SDiv(V4U32 a, U32 b) { return (V4U32){a.x / b, a.y / b, a.z / b, a.w / b}; }

static V2U32 V2U32_Clamp(V2U32 min, V2U32 max, V2U32 val) {
  return (V2U32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y)};
}
static V3U32 V3U32_Clamp(V3U32 min, V3U32 max, V3U32 val) {
  return (V3U32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z)};
}
static V4U32 V4U32_Clamp(V4U32 min, V4U32 max, V4U32 val) {
  return (V4U32){Clamp(min.x, max.x, val.x), Clamp(min.y, max.y, val.y), Clamp(min.z, max.z, val.z), Clamp(min.w, max.w, val.w)};
}

static V2U32 V2U32_SClamp(U32 min, U32 max, V2U32 val) {
  return (V2U32){Clamp(min, max, val.x), Clamp(min, max, val.y)};
}
static V3U32 V3U32_SClamp(U32 min, U32 max, V3U32 val) {
  return (V3U32){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z)};
}
static V4U32 V4U32_SClamp(U32 min, U32 max, V4U32 val) {
  return (V4U32){Clamp(min, max, val.x), Clamp(min, max, val.y), Clamp(min, max, val.z), Clamp(min, max, val.w)};
}

static V2U32 V2U32_SMin(V2U32 val, U32 min) {
  return (V2U32){Min(min, val.x), Min(min, val.y)};
}
static V3U32 V3U32_SMin(V3U32 val, U32 min) {
  return (V3U32){Min(min, val.x), Min(min, val.y), Min(min, val.z)};
}
static V4U32 V4U32_SMin(V4U32 val, U32 min) {
  return (V4U32){Min(min, val.x), Min(min, val.y), Min(min, val.z), Min(min, val.w)};
}

static V2U32 V2U32_SMax(V2U32 val, U32 max) {
  return (V2U32){Max(max, val.x), Max(max, val.y)};
}
static V3U32 V3U32_SMax(V3U32 val, U32 max) {
  return (V3U32){Max(max, val.x), Max(max, val.y), Max(max, val.z)};
}
static V4U32 V4U32_SMax(V4U32 val, U32 max) {
  return (V4U32){Max(max, val.x), Max(max, val.y), Max(max, val.z), Max(max, val.w)};
}

static U32 V2U32_Dot(V2U32 a, V2U32 b) { return a.x*b.x + a.y*b.y; }
static U32 V3U32_Dot(V3U32 a, V3U32 b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
static U32 V4U32_Dot(V4U32 a, V4U32 b) { return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w; }

static bool V2U32_HasLength(V2U32 a) { return a.x || a.y; }
static bool V3U32_HasLength(V3U32 a) { return a.x || a.y || a.z; }
static bool V4U32_HasLength(V4U32 a) { return a.x || a.y || a.z || a.w; }

